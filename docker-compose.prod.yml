version: '3.8'

services:
  redis:
    image: redis:7.2-alpine
    container_name: legacy_pi_redis_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # 只允许本地访问
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - legacy_pi_network
    env_file:
      - env.production
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:7.0
    container_name: legacy_pi_mongodb_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:27017:27017"  # 只允许本地访问
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - legacy_pi_network
    env_file:
      - env.production

  django-app:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: legacy_pi_django_prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:8000:8000"  # 只允许本地访问，通过 Nginx 代理
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGODB_HOST=${MONGODB_HOST:-mongodb}
      - MONGODB_PORT=${MONGODB_PORT:-27017}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - ARK_API_KEY=${ARK_API_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost,http://127.0.0.1}
    volumes:
      - ./media:/app/media
      - ./static:/app/static
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_started
    networks:
      - legacy_pi_network
    env_file:
      - env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/ai-chat/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: legacy_pi_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./static:/var/www/static
      - ./media:/var/www/media
    depends_on:
      - django-app
    networks:
      - legacy_pi_network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  legacy_pi_network:
    driver: bridge
